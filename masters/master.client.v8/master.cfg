# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable
from twisted.internet import defer
from twisted.python import log
from twisted.python.failure import Failure

from common import chromium_utils

from master import gitiles_poller
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import annotator_factory
from master.factory import chromium_factory

import config
import master_site_config

import os


ActiveMaster = master_site_config.V8

TREE_GATE_KEEPER = ActiveMaster.is_production_host
MAIL_NOTIFIER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []


####### DATABASE

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

comparator = gitiles_poller.GitilesRevisionComparator()
c['change_source'] = [
  gitiles_poller.GitilesPoller(
    'https://chromium.googlesource.com/v8/v8',
    branches=['master'],
    pollInterval=10,
    comparator=comparator,
  ),
]

####### SCHEDULERS

## configure the Schedulers
# v8 Scheduler
s_v8 = Scheduler(name='v8_src',
                 branch='master',
                 treeStableTimer=0,
                 builderNames=['V8 Linux - debug builder',
                               'V8 Linux - nosnap builder',
                               'V8 Linux - nosnap debug builder',
                               'V8 Linux - shared',
                               'V8 Linux - vtunejit',
                               'V8 Linux - x87 - nosnap - debug',
                               'V8 Linux - predictable',
                               'V8 Linux64 - debug builder',
                               'V8 Linux clang',
                               'V8 Linux64 ASAN',
                               'V8 Linux64 TSAN',
                               'V8 Linux - arm64 - sim - MSAN',
                               'V8 Linux - noi18n - debug',
                               'V8 Win32 - builder',
                               'V8 Win32 - debug builder',
                               'V8 Win32 - nosnap - shared',
                               'V8 Win64',
                               'V8 Win64 - debug',
                               'V8 Mac',
                               'V8 Mac - debug',
                               'V8 Mac64',
                               'V8 Mac64 - debug',
                               'V8 Mac GC Stress - 1',
                               'V8 Mac GC Stress - 2',
                               'V8 Mac GC Stress - 3',
                               'V8 Arm - builder',
                               'V8 Arm - debug builder',
                               'V8 Android Arm - builder',
                               'V8 Linux - arm - sim',
                               'V8 Linux - arm - sim - debug',
                               'V8 Linux - arm - sim - novfp3',
                               'V8 Linux - arm - sim - debug - novfp3',
                               'V8 Linux - arm64 - sim',
                               'V8 Linux - arm64 - sim - debug',
                               'V8 Linux - arm64 - sim - nosnap - debug - 1',
                               'V8 Linux - arm64 - sim - nosnap - debug - 2',
                               'V8 Linux - arm64 - sim - gc stress',
                               'V8 Linux - mips - sim - builder',
                               'Linux Debug Builder',
                               'Linux ASAN Builder',
                               'Android Builder',
                               'Linux Snapshot Builder',
                               'Chrome Win7 Perf',
                               'Chrome Mac10.6 Perf',
                               'Chrome Linux Perf',
                               'V8-Blink Win',
                               'V8-Blink Mac',
                               'V8-Blink Linux 32',
                               'V8-Blink Linux 64',
                               'V8-Blink Linux 64 (dbg)',
                               'V8 Linux GN',
                               'NaCl V8 Linux64 - stable',
                               'NaCl V8 Linux64 - canary'])

# Scheduler for all revisions.
s_v8_all = Scheduler(name='v8_src_all',
                     branch='master',
                     treeStableTimer=0,
                     builderNames=['V8 Linux - builder',
                                   'V8 Linux64 - builder'])

# These builders run nightly.
s_v8_nightly = Nightly(name='v8_thrice_nightly',
                       branch=None,
                       builderNames=['V8 Linux - full debug',
                                     'V8 Linux - interpreted regexp',
                                     'V8 Random Deopt Fuzzer - debug'],
                       hour=[12],
                       minute=30)

# Auto-roll builders.
s_v8_auto_roll = Nightly(name='v8_auto_roll',
                         branch=None,
                         builderNames=['Auto-roll - version',
                                       'Auto-roll - deps'],
                         minute=[0, 30])

s_v8rel = Nightly(name='v8_v8rel',
                  branch=None,
                  builderNames=['Auto-roll - v8rel'],
                  minute=[0, 15, 30, 45])

s_linux_rel_trigger = Triggerable('v8_linux_rel',
                                  ['V8 Linux',
                                   'V8 Linux - isolates',
                                   'V8 Linux - nosse3',
                                   'V8 Linux - nosse4',
                                   'V8 Linux - deadcode',
                                   'V8 Linux - gcmole',
                                   'V8 Linux - debug - code serializer',
                                   'V8 Deopt Fuzzer'])

s_linux_dbg_trigger = Triggerable('v8_linux_dbg',
                                  ['V8 Linux - debug',
                                   'V8 Linux - test262 - debug',
                                   'V8 Linux - debug - isolates',
                                   'V8 Linux - debug - nosse3',
                                   'V8 Linux - debug - nosse4',
                                   'V8 GC Stress - 1',
                                   'V8 GC Stress - 2',
                                   'V8 GC Stress - 3',
                                   'V8 Linux - memcheck'])

s_linux_nosnap_rel_trigger = Triggerable('v8_linux_nosnap_rel',
                                         ['V8 Linux - nosnap'])

s_linux_nosnap_dbg_trigger = Triggerable('v8_linux_nosnap_dbg',
                                         ['V8 Linux - nosnap - debug'])

s_linux64_rel_trigger = Triggerable('v8_linux64_rel', ['V8 Linux64'])

s_linux64_dbg_trigger = Triggerable('v8_linux64_dbg',
                                    ['V8 Linux64 - debug', 'V8 Fuzzer'])

s_win32_rel_trigger = Triggerable('v8_win32_rel',
                                  ['V8 Win32 - 1', 'V8 Win32 - 2'])

s_win32_dbg_trigger = Triggerable('v8_win32_dbg',
                                  ['V8 Win32 - debug - 1',
                                   'V8 Win32 - debug - 2',
                                   'V8 Win32 - debug - 3'])

s_arm_rel_trigger = Triggerable('v8_arm_rel', ['V8 Arm'])

s_arm_dbg_trigger = Triggerable('v8_arm_dbg', ['V8 Arm - debug - 1',
                                               'V8 Arm - debug - 2',
                                               'V8 Arm GC Stress'])

s_mips_rel_trigger = Triggerable('v8_mips_rel', ['V8 Linux - mips - sim'])

s_cr_linux_dbg_trigger = Triggerable('cr_linux_dbg',
                                     ['Linux Tests (dbg)(1)'])

s_cr_linux_asan_trigger = Triggerable('cr_linux_asan', ['Linux64 ASAN'])

s_cr_android_rel_trigger = Triggerable('cr_android_rel',
                                       ['Android Nexus4 Perf'])

c['schedulers'] = [s_v8, s_v8_all, s_v8_nightly, s_arm_rel_trigger,
                   s_cr_linux_dbg_trigger, s_cr_linux_asan_trigger,
                   s_cr_android_rel_trigger, s_win32_rel_trigger,
                   s_win32_dbg_trigger, s_linux_rel_trigger,
                   s_linux_dbg_trigger, s_linux_nosnap_rel_trigger,
                   s_linux_nosnap_dbg_trigger, s_linux64_rel_trigger,
                   s_linux64_dbg_trigger, s_arm_dbg_trigger, s_v8_auto_roll,
                   s_v8rel, s_mips_rel_trigger]

builders = []

builder_priorities = {}

@defer.deferredGenerator
def prioritizeBuilders(buildmaster, builders):
  try:
    # Presort with default sorting function of builbot. The default sorting
    # takes the age of the latest build requests into account.
    sorter = (lambda:
        buildmaster.botmaster.brd._defaultSorter(buildmaster, builders))
    wfd = defer.waitForDeferred(defer.maybeDeferred(sorter))
    yield wfd
    builders = wfd.getResult()
  except:
    log.msg("Exception prioritizing builders; presorting failed")
    log.err(Failure())
  yield sorted(builders, key=lambda b: builder_priorities.get(b.name, 0))

c['prioritizeBuilders'] = prioritizeBuilders

# ----------------------------------------------------------------------------
# FACTORIES

m_annotator = annotator_factory.AnnotatorFactory()

GS = master_config.GetGSUtilUrl

cr_linux_asan_archive = GS('chromium-v8', 'v8_cr_linux_asan')

bleeding_edge_url = 'http://v8.googlecode.com/svn/branches/bleeding_edge'
bleeding_edge_rev_url = '%s@$$V8_REV$$' % bleeding_edge_url

cr_lkcr = 'https://build.chromium.org/p/chromium/lkcr-status/lkgr'

F = chromium_factory.ChromiumFactory
def win(): return F(
    'src/build', 'win32',
    custom_deps_list=[['src/v8', bleeding_edge_rev_url]],
    got_revision_mapping_overrides={
      'src/v8': 'got_revision',
      'src': 'got_cr_revision',
    })
def mac(): return F(
    'src/out', 'darwin',
    custom_deps_list=[['src/v8', bleeding_edge_rev_url]],
    got_revision_mapping_overrides={
      'src/v8': 'got_revision',
      'src': 'got_cr_revision',
    })
def linux(): return F(
    'src/out', 'linux2',
    custom_deps_list=[['src/v8', bleeding_edge_rev_url]],
    got_revision_mapping_overrides={
      'src/v8': 'got_revision',
      'src': 'got_cr_revision',
    })

cross_platform = ['page_cycler_bloat', 'page_cycler_moz', 'page_cycler_morejs',
                  'page_cycler_intl_ar_fa_he', 'page_cycler_intl_es_fr_pt-BR',
                  'page_cycler_intl_hi_ru', 'page_cycler_intl_ja_zh',
                  'page_cycler_intl_ko_th_vi', 'page_cycler_typical_25',
                  'page_cycler_dhtml', 'dom_perf', 'sunspider', 'octane',
                  'dromaeo', 'kraken', 'blink_perf']
desktop = ['tab_switching_top_10']

perf_tests = cross_platform + desktop

f_chromium_rel_perf_win7_dual_v8 = win().ChromiumFactory(
    mode='google_chrome',
    compile_timeout=7200,
    options=['--build-tool=ninja', '--', 'chromium_builder_perf'],
    target='Release',
    tests=perf_tests,
    factory_properties={
        'perf_id': 'chromium-rel-win7-dual-v8',
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                                       'component=static_library fastbuild=1'},
        'show_perf_results': True,
        'show_v8_revision': True,
        'no_gclient_revision': True,
        'primary_repo': 'v8_',
        'safesync_url': cr_lkcr,
    })

f_chromium_rel_mac6_perf_v8 = mac().ChromiumFactory(
    tests=perf_tests,
    options=['--build-tool=ninja', '--compiler=goma-clang', '--',
             'chromium_builder_perf'],
    factory_properties={
        'perf_id': 'chromium-rel-mac6-v8',
        'show_perf_results': True,
        'show_v8_revision': True,
        'no_gclient_revision': True,
        'primary_repo': 'v8_',
        'gclient_env': {
            'GYP_GENERATORS': 'ninja',
            'GYP_DEFINES': 'fastbuild=1 clang_use_chrome_plugins=0',
         },
         'safesync_url': cr_lkcr,
    })

f_chromium_rel_linux_perf_v8 = linux().ChromiumFactory(
    tests=perf_tests,
    options=['--build-tool=ninja', '--', 'chromium_builder_perf'],
    factory_properties={
        'perf_id': 'chromium-rel-linux-v8',
        'show_perf_results': True,
        'show_v8_revision': True,
        'no_gclient_revision': True,
        'primary_repo': 'v8_',
        'gclient_env': {
            'GYP_GENERATORS': 'ninja',
            'GYP_DEFINES': 'target_arch=x64 component=static_library '
                           'linux_strip_binary=1 '
                           'clang_use_chrome_plugins=0',
         },
         'safesync_url': cr_lkcr,
    })

asan_gyp_defines = ('asan=1 lsan=1 use_allocator=none '
                    'clang_use_chrome_plugins=0')

f_chromium_linux_asan_builder = linux().ChromiumASANFactory(
    slave_type='Builder',
    build_url=cr_linux_asan_archive,
    target='Release',
    options=[
      '--compiler=goma-clang',
      '--build-tool=ninja',
      'browser_tests',
      'content_browsertests',
      'media_unittests',
      'net_unittests',
      'remoting_unittests',
    ],
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES' : asan_gyp_defines,
        'GYP_GENERATORS': 'ninja',
      },
      'no_gclient_revision': True,
      'primary_repo': 'v8_',
      'revision_dir': 'v8',
      'safesync_url': cr_lkcr,
      'trigger': 'cr_linux_asan',
    })

f_chromium_rel_linux_asan_v8 = linux().ChromiumASANFactory(
    slave_type='Tester',
    target='Release',
    build_url=cr_linux_asan_archive,
    tests=[
      'browser_tests',
      'net',
      'media',
      'remoting',
      'content_browsertests',
    ],
    factory_properties={
      'asan': True,
      'cluster_size': 1,
      'lsan': True,
      'no_gclient_revision': True,
      'primary_repo': 'v8_',
      'revision_dir': 'v8',
      'sharded_tests': [
        'browser_tests',
        'content_browsertests',
        'media_unittests',
        'net_unittests',
        'remoting_unittests',
      ]
    })

f_chromium_linux_snapshot_builder = linux().ChromiumFactory(
    slave_type='Builder',
    options=[
      '--build-tool=ninja',
      '--compiler=goma',
    ],
    factory_properties={
      'archive_build': True,
      'build_name': 'Linux_x64',
      'gclient_env': { 'GYP_GENERATORS': 'ninja' },
      'gs_bucket': 'gs://chromium-v8-snapshots',
      'no_gclient_revision': True,
      'primary_repo': 'v8_',
      'revision_dir': 'v8',
      'safesync_url': cr_lkcr,
    })

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_v8_linux_builder = {
  'name': 'V8 Linux - builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_linux_rel']),
  'category': '01Linux|builders',
  'slavebuilddir': 'linux-builder',
  # Build all revisions on linux 32 release.
  'mergeRequests': False,
  'auto_reboot' : False,
}

b_v8_linux_debug_builder = {
  'name': 'V8 Linux - debug builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_linux_dbg']),
  'category': '01Linux|builders',
  'slavebuilddir': 'linux-builder',
  'auto_reboot' : False,
}

b_v8_linux_nosnap_builder = {
  'name': 'V8 Linux - nosnap builder',
  'factory':  m_annotator.BaseFactory('v8', triggers=['v8_linux_nosnap_rel']),
  'slavebuilddir': 'linux-nosnap-builder',
  'category': '01Linux|builders',
  'auto_reboot' : False,
}

b_v8_linux_nosnap_debug_builder = {
  'name': 'V8 Linux - nosnap debug builder',
  'factory':  m_annotator.BaseFactory('v8', triggers=['v8_linux_nosnap_dbg']),
  'slavebuilddir': 'linux-nosnap-builder',
  'category': '01Linux|builders',
  'slavebuilddir': 'v8-linux-nosnap-debug',
  'auto_reboot' : False,
}

b_v8_linux = {
  'name': 'V8 Linux',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_vtunejit = {
  'name': 'V8 Linux - vtunejit',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_v8_linux_x87_nosnap_debug = {
  'name': 'V8 Linux - x87 - nosnap - debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '11FYI|x87',
  'auto_reboot' : False,
}

b_v8_linux_predictable = {
  'name': 'V8 Linux - predictable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_v8_linux_interpreted_regexp = {
  'name': 'V8 Linux - interpreted regexp',
  'builddir': 'v8-linux-interpreted-regexp',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_v8_linux_noi18n_debug = {
  'name': 'V8 Linux - noi18n - debug',
  'builddir': 'v8-linux-noi18n-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug = {
  'name': 'V8 Linux - debug',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_test262_debug = {
  'name': 'V8 Linux - test262 - debug',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_full_debug = {
  'name': 'V8 Linux - full debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_v8_linux_shared = {
  'name': 'V8 Linux - shared',
  'slavebuilddir': 'linux-shared',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux64_builder = {
  'name': 'V8 Linux64 - builder',
  'slavebuilddir': 'linux64-builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_linux64_rel']),
  'category': '02Linux64|builders',
  # Build all revisions on linux 64 release.
  'mergeRequests': False,
  'auto_reboot' : False,
}

b_v8_linux64_debug_builder = {
  'name': 'V8 Linux64 - debug builder',
  'slavebuilddir': 'linux64-builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_linux64_dbg']),
  'category': '02Linux64|builders',
  'auto_reboot' : False,
}

b_v8_linux64 = {
  'name': 'V8 Linux64',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Linux64|testers',
  'auto_reboot' : False,
}

b_v8_linux64_debug = {
  'name': 'V8 Linux64 - debug',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Linux64|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosnap = {
  'name': 'V8 Linux - nosnap',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosnap_debug = {
  'name': 'V8 Linux - nosnap - debug',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim = {
  'name': 'V8 Linux - arm - sim',
  'slavebuilddir': 'arm-sim',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_debug = {
  'name': 'V8 Linux - arm - sim - debug',
  'slavebuilddir': 'arm-sim',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_novfp3 = {
  'name': 'V8 Linux - arm - sim - novfp3',
  'slavebuilddir': 'arm-sim-novfp3',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_debug_novfp3 = {
  'name': 'V8 Linux - arm - sim - debug - novfp3',
  'slavebuilddir': 'arm-sim-novfp3',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_mips_sim_builder = {
  'name': 'V8 Linux - mips - sim - builder',
  'slavebuilddir': 'mips-sim',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_mips_rel']),
  'category': '06Simulators',
  'auto_reboot' : False,
}

b_v8_linux_mips_sim = {
  'name': 'V8 Linux - mips - sim',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '06Simulators',
  'auto_reboot' : False,
}

b_v8_win32_builder = {
  'name': 'V8 Win32 - builder',
  'slavebuilddir': 'win-builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_win32_rel']),
  'category': '03Windows|builders',
  'auto_reboot' : False,
}

b_v8_win32_1 = {
  'name': 'V8 Win32 - 1',
  'slavebuilddir': 'win',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_2 = {
  'name': 'V8 Win32 - 2',
  'slavebuilddir': 'win',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_nosnap_shared = {
  'name': 'V8 Win32 - nosnap - shared',
  'builddir': 'v8-win32-nosnap-shared',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

# Non standard builddir because of path length limit (Test262 tests)
# for all win32 debug slaves.

b_v8_win32_debug_builder = {
  'name': 'V8 Win32 - debug builder',
  'slavebuilddir': 'win-builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_win32_dbg']),
  'category': '03Windows|builders',
  'auto_reboot' : False,
}

b_v8_win32_debug_1 = {
  'name': 'V8 Win32 - debug - 1',
  'slavebuilddir': 'win',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_debug_2 = {
  'name': 'V8 Win32 - debug - 2',
  'slavebuilddir': 'win',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_debug_3 = {
  'name': 'V8 Win32 - debug - 3',
  'slavebuilddir': 'win',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_mac = {
  'name': 'V8 Mac',
  'slavebuilddir': 'mac',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_mac_debug = {
  'name': 'V8 Mac - debug',
  'slavebuilddir': 'mac',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_mac64 = {
  'name': 'V8 Mac64',
  'slavebuilddir': 'mac64',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_mac64_debug = {
  'name': 'V8 Mac64 - debug',
  'slavebuilddir': 'mac64',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_win64 = {
  'name': 'V8 Win64',
  'slavebuilddir': 'win64',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win64_debug = {
  'name': 'V8 Win64 - debug',
  'slavebuilddir': 'win64',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_linux_isolates = {
  'name': 'V8 Linux - isolates',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_isolates = {
  'name': 'V8 Linux - debug - isolates',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosse3 = {
  'name': 'V8 Linux - nosse3',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_nosse3 = {
  'name': 'V8 Linux - debug - nosse3',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosse4 = {
  'name': 'V8 Linux - nosse4',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_nosse4 = {
  'name': 'V8 Linux - debug - nosse4',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_deadcode = {
  'name': 'V8 Linux - deadcode',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_code_serializer = {
  'name': 'V8 Linux - debug - code serializer',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux',
  'auto_reboot' : False,
}

b_v8_linux_gcmole = {
  'name': 'V8 Linux - gcmole',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_fuzz = {
  'name': 'V8 Fuzzer',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_linux_deopt_fuzzer = {
  'name': 'V8 Deopt Fuzzer',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_linux_random_deopt_fuzzer_debug = {
  'name': 'V8 Random Deopt Fuzzer - debug',
  'builddir': 'v8-linux-random-deopt-fuzzer-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_v8_gcstress_1 = {
  'name': 'V8 GC Stress - 1',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_gcstress_2 = {
  'name': 'V8 GC Stress - 2',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_gcstress_3 = {
  'name': 'V8 GC Stress - 3',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_mac_gcstress_1 = {
  'name': 'V8 Mac GC Stress - 1',
  'slavebuilddir': 'mac',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_mac_gcstress_2 = {
  'name': 'V8 Mac GC Stress - 2',
  'slavebuilddir': 'mac',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_mac_gcstress_3 = {
  'name': 'V8 Mac GC Stress - 3',
  'slavebuilddir': 'mac',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot' : False,
}

b_v8_arm_gcstress = {
  'name': 'V8 Arm GC Stress',
  'slavebuilddir': 'arm',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc',
  'auto_reboot': False,
}
builder_priorities['V8 Arm GC Stress'] = 2

b_v8_linux_clang = {
  'name': 'V8 Linux clang',
  'builddir': 'v8-linux-clang',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc|testers',
  'auto_reboot' : False,
}

b_v8_linux64_asan = {
  'name': 'V8 Linux64 ASAN',
  'builddir': 'v8-linux64-asan',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc|testers',
  'auto_reboot' : False,
}

b_v8_linux64_tsan = {
  'name': 'V8 Linux64 TSAN',
  'builddir': 'v8-linux64-tsan',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm64_sim_msan = {
  'name': 'V8 Linux - arm64 - sim - MSAN',
  'builddir': 'v8-linux-arm64-sim-msan',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc|testers',
  'auto_reboot' : False,
}

b_v8_linux_memcheck = {
  'name': 'V8 Linux - memcheck',
  'slavebuilddir': 'linux',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '07Misc|testers',
  'auto_reboot' : False,
}

b_chromium_linux_dbg_builder = {
  'name': 'Linux Debug Builder',
  'factory': m_annotator.BaseFactory('chromium', triggers=['cr_linux_dbg']),
  'category': '09Nonlayout|builders',
}

b_browser_dbg_v8 = {
  'name': 'Linux Tests (dbg)(1)',
  'builddir': 'browser-dbg-v8',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': '09Nonlayout',
}

b_chromium_linux_asan_builder = {
  'name': 'Linux ASAN Builder',
  'factory': f_chromium_linux_asan_builder,
  'category': '09Nonlayout|builders',
}

b_chromium_rel_linux_asan = {
  'name': 'Linux64 ASAN',
  'builddir': 'chromium-rel-linux-asan-v8',
  'factory': f_chromium_rel_linux_asan_v8,
  'category': '09Nonlayout|asan',
}

b_chromium_rel_android_builder = {
  'name': 'Android Builder',
  'factory': m_annotator.BaseFactory('android/builder',
                                     triggers=['cr_android_rel']),
  'category': '09Nonlayout|builders',
}

b_chromium_linux_snapshot_builder = {
  'name': 'Linux Snapshot Builder',
  'factory': f_chromium_linux_snapshot_builder,
  'category': '09Nonlayout|builders',
}

b_chromium_rel_win7_perf_dual_v8 = {
  'name': 'Chrome Win7 Perf',
  'builddir': 'chromium-rel-win7-perf-dual-v8',
  'factory': f_chromium_rel_perf_win7_dual_v8,
  'category': '10Performance',
}

b_chromium_rel_mac6_perf_v8 = {
  'name': 'Chrome Mac10.6 Perf',
  'builddir': 'chromium-rel-mac6-perf-v8',
  'factory': f_chromium_rel_mac6_perf_v8,
  'category': '10Performance',
}

b_chromium_rel_linux_perf_v8 = {
  'name': 'Chrome Linux Perf',
  'builddir': 'chromium-rel-linux-perf-v8',
  'factory': f_chromium_rel_linux_perf_v8,
  'category': '10Performance',
}

b_chromium_rel_android_nexus4_perf = {
  'name': 'Android Nexus4 Perf',
  'factory': m_annotator.BaseFactory('android/perf'),
  'category': '10Performance',
}

b_blink_rel_v8 = {
  'name': 'V8-Blink Win',
  'factory': m_annotator.BaseFactory('blink_downstream'),
  'category': '08Layout',
}

b_blink_rel_mac_v8 = {
  'name': 'V8-Blink Mac',
  'factory': m_annotator.BaseFactory('blink_downstream'),
  'category': '08Layout',
}

b_blink_rel_linux_v8 = {
  'name': 'V8-Blink Linux 32',
  'factory': m_annotator.BaseFactory('blink_downstream'),
  'category': '08Layout',
}

b_blink_rel_linux64_v8 = {
  'name': 'V8-Blink Linux 64',
  'factory': m_annotator.BaseFactory('blink_downstream'),
  'category': '08Layout',
}

b_blink_dbg_linux64_v8 = {
  'name': 'V8-Blink Linux 64 (dbg)',
  'factory': m_annotator.BaseFactory('blink_downstream'),
  'category': '08Layout',
}

b_v8_arm_builder = {
  'name': 'V8 Arm - builder',
  'slavebuilddir': 'arm-builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_arm_rel']),
  'category': '05Arm',
  'auto_reboot' : False,
}

b_v8_arm_debug_builder = {
  'name': 'V8 Arm - debug builder',
  'slavebuilddir': 'arm-builder',
  'factory': m_annotator.BaseFactory('v8', triggers=['v8_arm_dbg']),
  'category': '05Arm',
  'auto_reboot' : False,
}

b_v8_android_arm_builder = {
  'name': 'V8 Android Arm - builder',
  'slavebuilddir': 'android-arm-builder',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '05Arm',
  'auto_reboot' : False,
}

b_v8_arm = {
  'name': 'V8 Arm',
  'slavebuilddir': 'arm',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '05Arm|testers',
  'auto_reboot': False,
}
builder_priorities['V8 Arm'] = 1

b_v8_arm_debug_1 = {
  'name': 'V8 Arm - debug - 1',
  'slavebuilddir': 'arm',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '05Arm|testers',
  'auto_reboot': False,
}
builder_priorities['V8 Arm - debug - 1'] = 1

b_v8_arm_debug_2 = {
  'name': 'V8 Arm - debug - 2',
  'slavebuilddir': 'arm',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '05Arm|testers',
  'auto_reboot': False,
}
builder_priorities['V8 Arm - debug - 2'] = 1

def CreateA64ReleaseBuilder():
  return {
    'name': 'V8 Linux - arm64 - sim',
    'slavebuilddir': 'arm64-sim',
    'factory': m_annotator.BaseFactory('v8'),
    'category': '06Simulators|testers',
    'auto_reboot' : False,
  }

def CreateA64DebugBuilder():
  return {
    'name': 'V8 Linux - arm64 - sim - debug',
    'slavebuilddir': 'arm64-sim',
    'factory': m_annotator.BaseFactory('v8'),
    'category': '06Simulators|testers',
    'auto_reboot' : False,
  }

def CreateA64NoSnapDebugBuilder(shard_count, shard_run):
  return {
    'name': 'V8 Linux - arm64 - sim - nosnap - debug - %d' % shard_run,
    'slavebuilddir': 'arm64-sim-nosnap',
    'factory': m_annotator.BaseFactory('v8'),
    'category': '06Simulators|testers',
    'auto_reboot' : False,
  }

def CreateA64GCStressBuilder():
  return {
    'name': 'V8 Linux - arm64 - sim - gc stress',
    'slavebuilddir': 'arm64-sim',
    'factory': m_annotator.BaseFactory('v8'),
    'category': '06Simulators|testers',
    'auto_reboot' : False,
  }

b_v8_linux_arm64_sim = CreateA64ReleaseBuilder()
b_v8_linux_arm64_sim_debug = CreateA64DebugBuilder()

b_v8_linux_arm64_sim_nosnap_debug_1 = CreateA64NoSnapDebugBuilder(2, 1)
b_v8_linux_arm64_sim_nosnap_debug_2 = CreateA64NoSnapDebugBuilder(2, 2)

b_v8_linux_arm64_sim_gc = CreateA64GCStressBuilder()

b_linux_gn = {
  'name': 'V8 Linux GN',
  'factory': m_annotator.BaseFactory('chromium_gn'),
  'category': '09Nonlayout',
  'auto_reboot' : True,
}

b_auto_roll_deps = {
  'name': 'Auto-roll - deps',
  'builddir': 'auto-roll-deps',
  'factory': m_annotator.BaseFactory('v8/auto_roll_deps'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_auto_roll_version = {
  'name': 'Auto-roll - version',
  'builddir': 'auto-roll-version',
  'factory': m_annotator.BaseFactory('v8/auto_roll_version'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_auto_roll_v8rel = {
  'name': 'Auto-roll - v8rel',
  'builddir': 'v8rel',
  'factory': m_annotator.BaseFactory('v8/auto_roll_v8rel'),
  'category': '11FYI',
  'auto_reboot' : False,
}

b_nacl_v8_linux64_canary = {
  'name': 'NaCl V8 Linux64 - canary',
  'builddir': 'nacl-v8-linux64-canary',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '12NaCl',
  'auto_reboot' : True,
}

b_nacl_v8_linux64_stable = {
  'name': 'NaCl V8 Linux64 - stable',
  'builddir': 'nacl-v8-linux64',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '12NaCl',
  'auto_reboot' : True,
}

c['builders'] = [b_v8_linux_builder,
                 b_v8_linux_debug_builder,
                 b_v8_linux_nosnap_builder,
                 b_v8_linux_nosnap_debug_builder,
                 b_v8_linux,
                 b_v8_linux_debug,
                 b_v8_linux_test262_debug,
                 b_v8_linux_shared,
                 b_v8_linux64_builder,
                 b_v8_linux64_debug_builder,
                 b_v8_linux64,
                 b_v8_linux64_debug,
                 b_v8_linux_nosnap,
                 b_v8_linux_nosnap_debug,
                 b_v8_win32_builder,
                 b_v8_win32_debug_builder,
                 b_v8_win32_1,
                 b_v8_win32_2,
                 b_v8_win32_nosnap_shared,
                 b_v8_win32_debug_1,
                 b_v8_win32_debug_2,
                 b_v8_win32_debug_3,
                 b_v8_win64,
                 b_v8_win64_debug,
                 b_v8_mac,
                 b_v8_mac_debug,
                 b_v8_mac64,
                 b_v8_mac64_debug,
                 b_v8_fuzz,
                 b_v8_linux_deopt_fuzzer,
                 b_v8_gcstress_1,
                 b_v8_gcstress_2,
                 b_v8_gcstress_3,
                 b_v8_mac_gcstress_1,
                 b_v8_mac_gcstress_2,
                 b_v8_mac_gcstress_3,
                 b_v8_arm_gcstress,
                 b_v8_linux_clang,
                 b_v8_linux64_asan,
                 b_v8_linux64_tsan,
                 b_v8_linux_arm64_sim_msan,
                 b_v8_linux_memcheck,
                 b_v8_linux_arm_sim,
                 b_v8_linux_arm_sim_debug,
                 b_v8_linux_arm_sim_novfp3,
                 b_v8_linux_arm_sim_debug_novfp3,
                 b_v8_linux_arm64_sim,
                 b_v8_linux_arm64_sim_debug,
                 b_v8_linux_arm64_sim_nosnap_debug_1,
                 b_v8_linux_arm64_sim_nosnap_debug_2,
                 b_v8_linux_arm64_sim_gc,
                 b_v8_linux_mips_sim_builder,
                 b_v8_linux_mips_sim,
                 b_blink_rel_v8,
                 b_blink_rel_mac_v8,
                 b_blink_rel_linux_v8,
                 b_blink_rel_linux64_v8,
                 b_blink_dbg_linux64_v8,
                 b_v8_linux_isolates,
                 b_v8_linux_nosse3,
                 b_v8_linux_nosse4,
                 b_v8_linux_deadcode,
                 b_v8_linux_debug_isolates,
                 b_v8_linux_debug_nosse3,
                 b_v8_linux_debug_nosse4,
                 b_v8_linux_gcmole,
                 b_v8_linux_noi18n_debug,
                 b_v8_linux_code_serializer,
                 b_v8_linux_vtunejit,
                 b_v8_linux_x87_nosnap_debug,
                 b_v8_linux_predictable,
                 b_v8_arm_builder,
                 b_v8_arm_debug_builder,
                 b_v8_android_arm_builder,
                 b_v8_arm,
                 b_v8_arm_debug_1,
                 b_v8_arm_debug_2,
                 b_chromium_linux_dbg_builder,
                 b_chromium_linux_asan_builder,
                 b_chromium_rel_android_builder,
                 b_chromium_linux_snapshot_builder,
                 b_browser_dbg_v8,
                 b_chromium_rel_linux_asan,
                 b_chromium_rel_linux_perf_v8,
                 b_chromium_rel_mac6_perf_v8,
                 b_chromium_rel_win7_perf_dual_v8,
                 b_chromium_rel_android_nexus4_perf,
                 b_v8_linux_full_debug,
                 b_v8_linux_interpreted_regexp,
                 b_v8_linux_random_deopt_fuzzer_debug,
                 b_linux_gn,
                 b_auto_roll_deps,
                 b_auto_roll_version,
                 b_auto_roll_v8rel,
                 b_nacl_v8_linux64_stable,
                 b_nacl_v8_linux64_canary]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'V8')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### GATE KEEPER

if TREE_GATE_KEEPER:
  import master_gatekeeper_cfg
  master_gatekeeper_cfg.Update(config, ActiveMaster, c)

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# TODO(machenbach): I think the next line is not used and has no effect:
# Adds common status and tools to this master.
# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    tagComparator=comparator,
    templates=['./templates', '../master.chromium/templates'])

if MAIL_NOTIFIER:
  import mail_notifier_cfg
  mail_notifier_cfg.Update(config, ActiveMaster, c)

# Do it at the end to override values set by AutoSetupMaster, the default is
# too low. Must keep at least a few days worth of builds.
c['buildHorizon'] = 3000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200

####### PROJECT IDENTITY

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
