# Copyright (c) 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import chromiumos_board_config

from common.cros_chromite import ChromiteTarget
from common.cros_chromite import SlaveType

# Use the SlaveAlloctor declared in 'board_config'.
sa = chromiumos_board_config.slave_allocator
sa.LoadState(enforce=False)

# Baremetal slaves (e.g., build123-m2)
sa.AddPool(SlaveType.BAREMETAL, *('build%s-m2' % (number,) for number in (
    85, 86, 87, 89, 90, 91, 92, 93, 112, 118, 141, 162, 174, 182,
    203, 263, 323, 326, 327
)))

# Baremetal shared slave pool (e.g., build123-m2)
baremetal_shared = '%s_shared' % (SlaveType.BAREMETAL,)
sa.AddPool(baremetal_shared, *('build%s-m2' % (number,) for number in (
    84, 94
)))

for board_config in chromiumos_board_config.builder_configs.itervalues():
  name = board_config.config.name
  if board_config.config.category in (
      ChromiteTarget.REFRESH_PACKAGES,
      ChromiteTarget.ASAN,
      ):
    sa.Join(
        name,
        sa.Alloc(
            'builder_shared',
            pools=[baremetal_shared],
            exclusive=False,
            subtype=name))
  else:
    sa.Join(
        name,
        sa.Alloc(
            'builder',
            pools=[SlaveType.BAREMETAL],
            exclusive=True,
            subtype=name))

def GenSlave(hostname, config_names):
  return {
      'master': 'ChromiumOS',
      'builder': [chromiumos_board_config.builder_configs[c].builder_name
                  for c in config_names],
      'hostname': str(hostname),
      'os': 'linux',
      'version': 'precise',
  }

slaves = []
slave_map = sa.GetSlaveMap()
for hostname, entry in slave_map.entries.iteritems():
  slaves.append(GenSlave(hostname, entry.keys))
