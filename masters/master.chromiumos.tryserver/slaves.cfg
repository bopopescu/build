# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# See master.experimental/slaves.cfg for documentation.

import chromiumos_tryserver_util


def _GenerateBuilder(format, ids):
  """Return a list of builder names given a format and id list.

  Arguments:
    format: Format of the name, that takes one integer id parameter.
    ids: A list of id elements.  Individual elements can be a standalone
         integer or a tuple.  Tuples are treated as inclusive ranges and
         expanded.  A tuple of (1,3) would be expanded as [1, 2, 3].
  """
  builders = set()
  for id_element in ids:
     if isinstance(id_element, tuple):
       builders.update([format % id for id in
                        xrange(id_element[0], id_element[1] + 1)])
     else:
       builders.add(format % id_element)
  return builders


#TODO(petermayo): Remove this if we don't put baremetal machines back soon.
def _GenerateBaremetal(*builder_ids):
  """Return a list of baremetal builder names (buildx-m2) given a list of id's.

  Arguments:
    id: See _GenerateBuilder() for id list format.
  """
  return _GenerateBuilder('build%i-m2', builder_ids)


def _GenerateGCE(*builder_ids):
  """Return a list of GCE builder names (crosx-c2) given a list of id's.

  Arguments:
    id: See _GenerateBuilder() for id list format.
  """
  return _GenerateBuilder('cros%i-c2', builder_ids)

def _GenerateGCETesting(*builder_ids):
  """Return a list of GCE builder names (cros-testingx-c2) given a list of id's.

  Arguments:
    id: See _GenerateBuilder() for id list format.
  """
  return _GenerateBuilder('cros-testing%i-c2', builder_ids)


exceptionVersions = {'trusty': []}
def _SlaveVersion(host):
  if host in testing_slaves:
    return 'testing'
  for vprime, hosts in exceptionVersions.iteritems():
    if host in hosts:
      return vprime
  return 'precise'


def _GenerateSlave(host, builders):
  return {
        'master': 'ChromiumOSTryServer',
        'builder': list(builders),
        'hostname': host,
        'os': 'linux',
        'version': _SlaveVersion(host),
    }


def _AllocateSlaves(*slave_builder_tuples):
  slave_list = []

  for slaves, builders in slave_builder_tuples:
    for host in slaves:
      slave_list.append(_GenerateSlave(host, builders))

  return slave_list


# Slave pool definitons.
#
# IMPORTANT: Slaves are currently allocated to pools, either:
# - 'pre-cq-group' pool, allocated only to the 'pre-cq-group' builder.
# - The General pool, consisting of all builders.
# - The GCE pool, an unscheduled pool that can be used via explicit request in
#   the try job description.
#
# This is reflected in 'chromiumos_tryserver_util.cros_builder_links'. If the
# grouping changes, this function should also be updated to reflect those
# changes in the 'buildslaves.html' template.

precq_slaves = _GenerateBaremetal((222,233), (238, 242), 244, (264, 277))
general_slaves = _GenerateBaremetal((207, 220))
gce_slaves = _GenerateGCE((1, 50))
gce_testing_slaves = _GenerateGCETesting((1, 10))

# Gather our testing slave set.
testing_slaves = set()

# All GCE slaves are currently in testing. They will not be scheduled unless
# explicitly requested (crbug.com/432716).
testing_slaves.update(gce_testing_slaves)

slaves = _AllocateSlaves(
    (precq_slaves, chromiumos_tryserver_util.precq_builders),
    (general_slaves, chromiumos_tryserver_util.all_builders),
    (gce_slaves, chromiumos_tryserver_util.precq_novmtest_builders),
    (gce_testing_slaves, chromiumos_tryserver_util.all_builders),
)
