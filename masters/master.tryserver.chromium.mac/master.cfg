# -*- python -*-
# ex: set syntax=python:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

import os
import socket

from buildbot.scheduler import Triggerable

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_config
from master import master_config_tryserver
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import annotator_factory
from master.factory import chromium_factory
from master.try_job_http import TryJobHTTP
from master.try_job_rietveld import TryJobRietveld
from master.try_job_svn import TryJobSubversion

import config
import master_site_config

ActiveMaster = master_site_config.TryServerChromiumMac


MAIL_NOTIFIER = ActiveMaster.is_production_host
UPDATE_CODEREVIEW = ActiveMaster.is_production_host
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host

CreateBuilder = master_config_tryserver.CreateBuilder
m_annotator = master_config_tryserver.m_annotator
m_chromium_mac = master_config_tryserver.m_chromium_mac
without_tests = master_config_tryserver.without_tests

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda *_: False

####### BUILDERS

# Try queues.
pools = BuildersPools('chrome')

# The default targets to build.
common_targets = [
  'chromium_builder_tests',
]

# Mac builder
mac_targets = common_targets[:]
mac_tests = [
 'app_list_unittests_br',
 'base_unittests_br',
 'browser_tests_br',
 'buildrunner_tests',
 'cacheinvalidation_br',
 'cast_br',
 'cc_unittests_br',
 'check_deps_br',
 'chromedriver_tests_br',
 'chromedriver_unittests_br',
 'components_unittests_br',
 'content_browsertests_br',
 'crypto_br',
 'device_unittests_br',
 'gcm_unit_tests_br',
 'gfx_unittests_br',
 'google_apis_unittests_br',
 'gpu_br',
 'interactive_ui_tests_br',
 'jingle_br',
 'media_br',
 'message_center_unittests_br',
 'nacl_integration_br',
 'net_br',
 'ppapi_unittests_br',
 'printing_br',
 'remoting_br',
 'sync_integration_br',
 'telemetry_perf_unittests_br',
 'telemetry_unittests_br',
 'unit_br',
 'url_unittests_br',
] + chromium_factory.blink_tests_for_chromium_tryjobs

b_mac_x64_rel = CreateBuilder(
    platform='mac',
    target='Release',
    tests=mac_tests + ['sizes_br'],
    builder_name='mac_x64_rel',
    options=['--', '-target', 'chromium_builder_tests'],
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'host_arch=x64 target_arch=x64',
      }
    },
    clang=True,
    goma=False,  # TODO(iannucci): Make this use goma.
    ninja=False,  # TODO(iannucci): Employ ninjas.
)

b_ios_rel_device = {
  'name': 'ios_rel_device',
  'factory': m_annotator.BaseFactory('chromium'),
}

b_ios_dbg_simulator = {
  'name': 'ios_dbg_simulator',
  'factory': m_annotator.BaseFactory('chromium'),
}

b_ios_rel_device_ninja = {
  'name': 'ios_rel_device_ninja',
  'factory': m_annotator.BaseFactory('chromium'),
}

chromium_builders = []

for targ in ('_rel', '_dbg'):
  chromium_builders.extend([{
    'name': 'mac_chromium%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot', timeout=3600),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'mac'
  }, {
    'name': 'mac_chromium_compile%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot', timeout=3600),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'mac'
  }])

chromium_builders.append({
  'name': 'mac_chromium_rel_ng',
  'factory': m_annotator.BaseFactory('chromium_trybot', timeout=3600),
  # Share build directory with compatible existing builders to save space.
  'slavebuilddir': 'mac'
})

chromium_builders.extend([{
    'name': 'mac_chromium_gn_dbg',
    'factory': m_annotator.BaseFactory('chromium_gn'),
    'slavebuilddir': 'mac_gn',
  }, {
    'name': 'mac_chromium_gn_rel',
    'factory': m_annotator.BaseFactory('chromium_gn'),
    'slavebuilddir': 'mac_gn',
  }])

chromium_builders.append({
  'name': 'mac_chromium_compile_dbg_ng',
  'factory': m_annotator.BaseFactory('chromium_trybot', timeout=3600),
  # Share build directory with compatible existing builders to save space.
  'slavebuilddir': 'mac'
})

b_mac_asan = CreateBuilder(
    platform='mac',
    target='Release',
    # unit_tests crash on 32-bit ASan Mac because some libraries interleave
    # with the shadow memory mapping. See http://crbug.com/238398.
    tests=without_tests(mac_tests, ['unit_br']),
    options=mac_targets,
    builder_name='mac_asan',
    goma=True,
    clang=True,
    factory_properties={
      'asan': True,
      'gclient_env': {
        'GYP_DEFINES': 'asan=1 fastbuild=0',
      },
    })

b_mac_asan_64 = CreateBuilder(
    platform='mac',
    target='Release',
    tests=mac_tests,
    options=mac_targets,
    builder_name='mac_asan_64',
    goma=True,
    clang=True,
    factory_properties={
      'asan': True,
      'gclient_env': {
        'GYP_DEFINES': ('asan=1 target_arch=x64 host_arch=x64 '
                        'fastbuild=0'),
      },
    })

# NaCl SDK try bots
b_mac_nacl_sdk = CreateBuilder(
    platform='mac',
    target='Release',
    options=['chromium_builder_tests'],
    tests=['annotated_steps'],
    builder_name='mac_nacl_sdk',
    factory_properties={
        'annotated_script': master_config_tryserver.nacl_sdk_script
    },
    goma=True,
    clang=True)

# NaCl SDK build-only try bots
b_mac_nacl_sdk_build = CreateBuilder(
    platform='mac',
    target='Release',
    options=[],
    tests=[],
    builder_name='mac_nacl_sdk_build',
    annotation_script=master_config_tryserver.nacl_sdk_script_build,
    goma=True,
    clang=True)

c['builders'] = [
  b_mac_x64_rel,
  b_ios_rel_device, b_ios_dbg_simulator, b_ios_rel_device_ninja,
  b_mac_asan, b_mac_asan_64,
  b_mac_nacl_sdk,
  b_mac_nacl_sdk_build,
] + chromium_builders


# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'TryServerChromiumMac')

for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder.setdefault('auto_reboot', ActiveMaster.is_production_host)


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

last_good_urls = {'chrome': ActiveMaster.last_good_url,
                  'blink': ActiveMaster.last_good_blink_url}
code_review_sites = {'chrome': ActiveMaster.code_review_site,
                     'blink': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
      name='try_job_http',
      port=ActiveMaster.try_job_port,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

if ActiveMaster.is_production_host:
  c['schedulers'].append(TryJobRietveld(
        name='try_job_rietveld',
        last_good_urls=last_good_urls,
        code_review_sites=code_review_sites,
        pools=pools,
        project='chrome',
        filter_master=True))

if LISTEN_TO_SVN:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
if ActiveMaster.is_production_host:
  c['buildbotURL'] = ActiveMaster.buildbot_url
else:
  c['buildbotURL'] = 'http://%s:%d/' % (
      socket.getfqdn(), ActiveMaster.master_port)

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(
    c, ActiveMaster,
    public_html='../master.tryserver.chromium.linux/public_html',
    templates=['../master.tryserver.chromium.linux/templates'])

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  from master import chromium_notifier
  c['status'].append(chromium_notifier.ChromiumNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps={'': ['update_scripts']},
      relayhost=config.Master.smtp,
      status_header=
          '%(steps)s failed on slave "%(slavename)s" for builder "%(builder)s"',
      subject='%(steps)s failed on trybot %(slavename)s on %(date)s',
      sendToInterestedUsers=False,
      extraRecipients=['chrome-troopers+tryalert@google.com'],
      use_getname=True,
      enable_mail=ActiveMaster.is_production_host))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      reply_to=ActiveMaster.reply_to,
      subject="try %(result)s for %(reason)s @ r%(revision)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))


# The followings are what is kept on disk.
# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs. 3000 is not even a full day but the server is full. Keep
# more build objects than log since they are much smaller.
c['buildHorizon'] = 6000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
c['logCompressionLimit'] = False

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3


# Hack buildbot so the Stop build button doesn't work anymore. Otherwise it's
# just a pain, user misuse this button all the time.
def hack_stop(function):
  def hook(*args, **kwargs):
    result = function(*args, **kwargs)
    result = result.replace('<input type="submit" value="Stop',
        '<input type="button" onclick="alert(\''
        'For more information, visit '
        'http://dev.chromium.org/developers/try-server-usage'
        '\');"'
        ' value="Stop')
    return result
  return hook

# Only do the hack_stop if we are the production master.  This allows
# us to keep the STOP button live for local/test instances.
#if ActiveMaster.is_production_host:
#  from buildbot.status.web.builder import StatusResourceBuilder
#  StatusResourceBuilder.build_line = hack_stop(StatusResourceBuilder.build_line)
#  from buildbot.status.web import base
#  base.make_stop_form = hack_stop(base.make_stop_form)


####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'

# vi: set ts=4 sts=2 sw=2 et:
