# -*- python -*-
# ex: set syntax=python:

# Copyright 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes.filter import ChangeFilter
from buildbot.scheduler import Nightly
from buildbot.schedulers.basic import SingleBranchScheduler

from common import chromium_utils

from master import gitiles_poller
from master import master_utils
from master import slaves_list
from master.factory import annotator_factory
from master.factory import chromium_factory
from master.url_poller import URLPoller

import branches_cfg
import config
import master_site_config


import os
import re

# Get the branches currently tracked on the waterfall, plus the names for the
# slaves on these branches from the branches_cfg.py file.
stable_branch = branches_cfg.stable_branch
beta_branch = branches_cfg.beta_branch

ActiveMaster = master_site_config.V8Branches

MAIL_NOTIFIER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []


####### DATABASE

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

comparator = gitiles_poller.GitilesRevisionComparator()
c['change_source'] = [
  gitiles_poller.GitilesPoller(
      'https://chromium.googlesource.com/v8/v8',
      branches=[
        'candidate',
        'refs/branch-heads/%s' % stable_branch,
        'refs/branch-heads/%s' % beta_branch,
      ],
      pollInterval=10,
      comparator=comparator,
  ),
  gitiles_poller.GitilesPoller(
      'https://chromium.googlesource.com/v8/v8',
      branches=[re.compile(r'refs/heads/\d+\.\d+\.\d+')],
      pollInterval=20,
      category='roll',
      comparator=comparator,
  )
]

####### SCHEDULERS

## configure the Schedulers
s_candidate = SingleBranchScheduler(
    name='v8_candidate',
    branch='candidate',
    treeStableTimer=10,
    builderNames=['Chromium ASAN (symbolized)',
                  'Chromium ASAN - debug',
                  'Chromium ASAN arm64 - debug',
                  'Chromium ASAN mipsel - debug',
                  'Chromium Win SyzyASAN'],
)

s_v8_roll = SingleBranchScheduler(
    name='v8_roll',
    change_filter=ChangeFilter(category='roll'),
    treeStableTimer=0,
    builderNames=[
        'V8 Linux - roll branch',
        'V8 Linux - roll branch - debug',
        'V8 arm - sim - roll branch',
        'V8 arm - sim - roll branch - debug',
        'V8 Linux64 - roll branch',
        'V8 Linux64 - roll branch - debug'],
)

s_v8_stable = SingleBranchScheduler(
    name='v8_stable',
    branch=stable_branch,
    treeStableTimer=0,
    builderNames=[
        'V8 Linux - stable branch',
        'V8 Linux - stable branch - debug',
        'V8 Linux64 - stable branch',
        'V8 Linux64 - stable branch - debug',
        'V8 arm - sim - stable branch',
        'V8 arm - sim - stable branch - debug',
        'V8 mipsel - sim - stable branch',
        'V8 mips64el - sim - stable branch',
        'V8 ppc - sim - stable branch',
        'V8 ppc64 - sim - stable branch'],
)

s_v8_beta = SingleBranchScheduler(
    name='v8_beta',
    branch=beta_branch,
    treeStableTimer=0,
    builderNames=[
          'V8 Linux - beta branch',
          'V8 Linux - beta branch - debug',
          'V8 Linux64 - beta branch',
          'V8 Linux64 - beta branch - debug',
          'V8 arm - sim - beta branch',
          'V8 arm - sim - beta branch - debug',
          'V8 mipsel - sim - beta branch',
          'V8 mips64el - sim - beta branch',
          'V8 ppc - sim - beta branch',
          'V8 ppc64 - sim - beta branch'],
)

c['schedulers'] = [s_candidate, s_v8_roll, s_v8_stable, s_v8_beta]

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_annotator = annotator_factory.AnnotatorFactory()

be_rev_url = 'http://v8.googlecode.com/svn/branches/bleeding_edge@$$V8_REV$$'

F = chromium_factory.ChromiumFactory
def linux(): return F(
    'src/out', 'linux2',
    custom_deps_list=[['src/v8', be_rev_url]],
    got_revision_mapping_overrides={
      'src/v8': 'got_revision',
      'src': 'got_cr_revision',
    })
def win(): return F(
    'src/out', 'win32',
    custom_deps_list=[['src/v8', be_rev_url]],
    got_revision_mapping_overrides={
      'src/v8': 'got_revision',
      'src': 'got_cr_revision',
    })

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

asan_x64_v8_arm64 = ('asan=1 lsan=1 sanitizer_coverage=3 disable_nacl=1 '
                     'v8_target_arch=arm64 host_arch=x86_64 target_arch=x64 '
                     'v8_enable_verify_heap=1 enable_ipc_fuzzer=1')

f_linux_asan_arm64_dbg = linux().ChromiumFactory(
    target='Debug',
    clobber=True,
    options=['--compiler=clang', 'd8'],
    factory_properties={
        'primary_repo': 'v8_',
        'cf_archive_build': ActiveMaster.is_production_host,
        'cf_archive_name': 'arm64-asan',
        'gs_bucket': 'gs://v8-asan',
        'gs_acl': 'public-read',
        'gclient_env': {
            'GYP_DEFINES': asan_x64_v8_arm64 + ' v8_optimized_debug=1',
        },
        'no_gclient_revision': True,
        'revision_dir': 'v8',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

asan_ia32_v8_mipsel = ('asan=1 sanitizer_coverage=3 disable_nacl=1 '
                       'v8_target_arch=mipsel host_arch=x86_64 '
                       'target_arch=ia32 '
                       'v8_enable_verify_heap=1 enable_ipc_fuzzer=1 ')

f_linux_asan_mipsel_dbg = linux().ChromiumFactory(
    target='Debug',
    clobber=True,
    options=['--compiler=goma-clang', 'd8'],
    factory_properties={
        'primary_repo': 'v8_',
        'cf_archive_build': ActiveMaster.is_production_host,
        'cf_archive_name': 'mipsel-asan',
        'gs_bucket': 'gs://v8-asan',
        'gs_acl': 'public-read',
        'gclient_env': {
            'GYP_DEFINES': asan_ia32_v8_mipsel + ' v8_optimized_debug=1',
        },
        'no_gclient_revision': True,
        'revision_dir': 'v8',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

f_win_syzyasan_rel = win().ChromiumFactory(
    clobber=True,
    options=['--build-tool=ninja', '--', 'chromium_builder_asan'],
    compile_timeout=7200,
    factory_properties={
        'primary_repo': 'v8_',
        'cf_archive_build': ActiveMaster.is_production_host,
        'cf_archive_name': 'syzyasan',
        'gs_bucket': 'gs://v8-asan',
        'gs_acl': 'public-read',
        'gclient_env': {
            'GYP_DEFINES': 'syzyasan=1 win_z7=1 chromium_win_pch=0 '
                           'component=static_library ',
            'GYP_GENERATORS': 'ninja',
            'GYP_USE_SEPARATE_MSPDBSRV': '1',
        },
        'syzyasan': True,
        'no_gclient_revision': True,
        'revision_dir': 'v8',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_v8_linux_roll = {
  'name': 'V8 Linux - roll branch',
  'builddir': 'v8-linux-roll',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Roll',
  'auto_reboot' : False,
}

b_v8_linux_roll_debug = {
  'name': 'V8 Linux - roll branch - debug',
  'builddir': 'v8-linux-roll-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Roll',
  'auto_reboot' : False,
}

b_v8_linux_stable = {
  'name': 'V8 Linux - stable branch',
  'builddir': 'v8-linux-stable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux_stable_debug = {
  'name': 'V8 Linux - stable branch - debug',
  'builddir': 'v8-linux-stable-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux_beta = {
  'name': 'V8 Linux - beta branch',
  'builddir': 'v8-linux-beta',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_linux_beta_debug = {
  'name':'V8 Linux - beta branch - debug',
  'builddir': 'v8-linux-beta-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_linux64_roll = {
  'name': 'V8 Linux64 - roll branch',
  'builddir': 'v8-linux64-roll',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Roll',
  'auto_reboot' : False,
}

b_v8_linux64_roll_debug = {
  'name': 'V8 Linux64 - roll branch - debug',
  'builddir': 'v8-linux64-roll-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Roll',
  'auto_reboot' : False,
}

b_v8_linux64_stable = {
  'name': 'V8 Linux64 - stable branch',
  'builddir': 'v8-linux64-stable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux64_stable_debug = {
  'name': 'V8 Linux64 - stable branch - debug',
  'builddir': 'v8-linux64-stable-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux64_beta = {
  'name': 'V8 Linux64 - beta branch',
  'builddir': 'v8-linux64-beta',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_linux64_beta_debug = {
  'name': 'V8 Linux64 - beta branch - debug',
  'builddir': 'v8-linux64-beta-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_arm_roll = {
  'name': 'V8 arm - sim - roll branch',
  'builddir': 'v8-arm-roll',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Roll',
  'auto_reboot' : False,
}

b_v8_arm_roll_debug = {
  'name': 'V8 arm - sim - roll branch - debug',
  'builddir': 'v8-arm-roll-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '03Roll',
  'auto_reboot' : False,
}

b_v8_arm_stable = {
  'name': 'V8 arm - sim - stable branch',
  'builddir': 'v8-arm-stable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_arm_stable_debug = {
  'name': 'V8 arm - sim - stable branch - debug',
  'builddir': 'v8-arm-stable-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_arm_beta = {
  'name': 'V8 arm - sim - beta branch',
  'builddir': 'v8-arm-beta',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_arm_beta_debug = {
  'name': 'V8 arm - sim - beta branch - debug',
  'builddir': 'v8-arm-beta-debug',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_mipsel_stable = {
  'name': 'V8 mipsel - sim - stable branch',
  'builddir': 'v8-mipsel-stable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_mipsel_beta = {
  'name': 'V8 mipsel - sim - beta branch',
  'builddir': 'v8-mipsel-beta',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_mips64el_stable = {
  'name': 'V8 mips64el - sim - stable branch',
  'builddir': 'v8-mips64el-stable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_mips64el_beta = {
  'name': 'V8 mips64el - sim - beta branch',
  'builddir': 'v8-mips64el-beta',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_ppc_stable = {
  'name': 'V8 ppc - sim - stable branch',
  'builddir': 'v8-ppc-stable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_ppc_beta = {
  'name': 'V8 ppc - sim - beta branch',
  'builddir': 'v8-ppc-beta',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_ppc64_stable = {
  'name': 'V8 ppc64 - sim - stable branch',
  'builddir': 'v8-ppc64-stable',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_ppc64_beta = {
  'name': 'V8 ppc64 - sim - beta branch',
  'builddir': 'v8-ppc64-beta',
  'factory': m_annotator.BaseFactory('v8'),
  'category': '02Beta',
  'auto_reboot' : False,
}

b_linux_asan_rel_sym = {
  'name': 'Chromium ASAN (symbolized)',
  'builddir': 'linux-asan-rel-sym',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': '04LKGR',
}

b_linux_asan_dbg = {
  'name': 'Chromium ASAN - debug',
  'builddir': 'linux-asan-dbg',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': '04LKGR',
}

b_linux_asan_arm64_dbg = {
  'name': 'Chromium ASAN arm64 - debug',
  'builddir': 'linux-asan-arm64-dbg',
  'factory': f_linux_asan_arm64_dbg,
  'category': '04LKGR',
}

b_linux_asan_mipsel_dbg = {
  'name': 'Chromium ASAN mipsel - debug',
  'builddir': 'linux-asan-mipsel-dbg',
  'factory': f_linux_asan_mipsel_dbg,
  'category': '04LKGR',
}

b_win_syzyasan_rel = {
  'name': 'Chromium Win SyzyASAN',
  'builddir': 'win-syzyasan-rel',
  'factory': f_win_syzyasan_rel,
  'category': '04LKGR',
}

c['builders'] = [b_v8_linux_stable,
                 b_v8_linux_stable_debug,
                 b_v8_linux64_stable,
                 b_v8_linux64_stable_debug,
                 b_v8_arm_stable,
                 b_v8_arm_stable_debug,
                 b_v8_mipsel_stable,
                 b_v8_mips64el_stable,
                 b_v8_ppc_stable,
                 b_v8_ppc64_stable,
                 b_v8_linux_beta,
                 b_v8_linux_beta_debug,
                 b_v8_linux64_beta,
                 b_v8_linux64_beta_debug,
                 b_v8_arm_beta,
                 b_v8_arm_beta_debug,
                 b_v8_mipsel_beta,
                 b_v8_mips64el_beta,
                 b_v8_ppc_beta,
                 b_v8_ppc64_beta,
                 b_v8_linux_roll,
                 b_v8_linux_roll_debug,
                 b_v8_linux64_roll,
                 b_v8_linux64_roll_debug,
                 b_v8_arm_roll,
                 b_v8_arm_roll_debug,
                 b_linux_asan_rel_sym,
                 b_linux_asan_dbg,
                 b_linux_asan_arm64_dbg,
                 b_linux_asan_mipsel_dbg,
                 b_win_syzyasan_rel]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'V8Branches')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    order_console_by_time=True,
    # FIXME(machenbach): Use the below instead of time-based ordering as soon
    # as lkgr is polled via gitiles.
    # tagComparator=comparator,
    templates=['../master.client.v8/templates',
               '../master.chromium/templates'])

if MAIL_NOTIFIER:
  from buildbot.status.mail import MailNotifier
  mn = MailNotifier(fromaddr=ActiveMaster.from_address,
                    mode='problem',
                    sendToInterestedUsers=True,
                    lookup=master_utils.FilterDomain())
  c['status'].append(mn)

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3

####### PROJECT IDENTITY

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
