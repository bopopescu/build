# -*- python -*-
# ex: set syntax=python:

# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from common import chromium_utils

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.scheduler import Triggerable

from master import gitiles_poller
from master import master_utils
from master import slaves_list
from master.factory import annotator_factory
from master.factory import chromium_factory

import config
import master_site_config

ActiveMaster = master_site_config.V8FYI

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []


####### DATABASE

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)


####### CHANGESOURCES

comparator = gitiles_poller.GitilesRevisionComparator()
c['change_source'] = [
  gitiles_poller.GitilesPoller(
      'https://chromium.googlesource.com/v8/v8',
      branches=['master'],
      pollInterval=20,
      comparator=comparator,
  )
]


####### FACTORIES

F = annotator_factory.AnnotatorFactory().BaseFactory

bleeding_edge_url = 'http://v8.googlecode.com/svn/branches/bleeding_edge'
bleeding_edge_rev_url = '%s@$$V8_REV$$' % bleeding_edge_url

cr_lkcr = 'https://build.chromium.org/p/chromium/lkcr-status/lkgr'

def linux(): return chromium_factory.ChromiumFactory(
    'src/out', 'linux2',
    custom_deps_list=[['src/v8', bleeding_edge_rev_url]],
    got_revision_mapping_overrides={
      'src/v8': 'got_revision',
      'src': 'got_cr_revision',
    })

f_chromium_linux_snapshot_builder = linux().ChromiumFactory(
    slave_type='Builder',
    options=[
      '--build-tool=ninja',
      '--compiler=goma',
    ],
    factory_properties={
      'archive_build': True,
      'build_name': 'Linux_x64',
      'gclient_env': { 'GYP_GENERATORS': 'ninja' },
      'gs_bucket': 'gs://chromium-v8-snapshots',
      'no_gclient_revision': True,
      'primary_repo': 'v8_',
      'revision_dir': 'v8',
      'safesync_url': cr_lkcr,
    })


####### BUILDER SPECS

CATEGORY_LAYOUT = '1Layout'
CATEGORY_NONLAYOUT = '2Nonlayout'
CATEGORY_PERF = '3Performance'

scheduled_builders = [
  {
    'name': 'V8-Blink Win',
    'factory': F('blink_downstream'),
    'category': CATEGORY_LAYOUT,
  },
  {
    'name': 'V8-Blink Mac',
    'factory': F('blink_downstream'),
    'category': CATEGORY_LAYOUT,
  },
  {
    'name': 'V8-Blink Linux 32',
    'factory': F('blink_downstream'),
    'category': CATEGORY_LAYOUT,
  },
  {
    'name': 'V8-Blink Linux 64',
    'factory': F('blink_downstream'),
    'category': CATEGORY_LAYOUT,
  },
  {
    'name': 'V8-Blink Linux 64 (dbg)',
    'factory': F('blink_downstream'),
    'category': CATEGORY_LAYOUT,
  },
  {
    'name': 'Linux Debug Builder',
    'factory': F('chromium', triggers=['cr_linux_dbg']),
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'V8 Linux GN',
    'factory': F('chromium_gn'),
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'V8 Android GN (dbg)',
    'factory': F('chromium_gn'),
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'Linux ASAN Builder',
    'factory': F('chromium', triggers=['cr_linux_asan']),
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'Android Builder',
    'factory': F('android/builder', triggers=['cr_android_rel']),
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'Linux Snapshot Builder',
    'factory': f_chromium_linux_snapshot_builder,
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'Chrome Linux Perf',
    'factory': F('chromium'),
    'category': CATEGORY_PERF,
  },
  {
    'name': 'Chrome Mac10.9 Perf',
    'factory': F('chromium'),
    'category': CATEGORY_PERF,
  },
  {
    'name': 'Chrome Win7 Perf',
    'factory': F('chromium'),
    'category': CATEGORY_PERF,
  },
]

triggered_builders = [
  {
    'name': 'Linux Tests (dbg)(1)',
    'factory': F('chromium'),
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'Linux ASan LSan Tests (1)',
    'factory': F('chromium'),
    'category': CATEGORY_NONLAYOUT,
  },
  {
    'name': 'Android Nexus4 Perf',
    'factory': F('android/perf'),
    'category': CATEGORY_PERF,
  },
]


####### SCHEDULERS

c['schedulers'] = [
  SingleBranchScheduler(
      name='v8_fyi',
      branch='master',
      treeStableTimer=10,
      builderNames=[builder['name'] for builder in scheduled_builders],
  ),
  Triggerable('cr_linux_dbg', ['Linux Tests (dbg)(1)']),
  Triggerable('cr_linux_asan', ['Linux ASan LSan Tests (1)']),
  Triggerable('cr_android_rel', ['Android Nexus4 Perf']),
]


####### BUILDERS

c['builders'] = scheduled_builders + triggered_builders

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'V8FYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    tagComparator=comparator,
    templates=['../master.client.v8/templates',
               '../master.chromium/templates'])

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3


####### PROJECT IDENTITY

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
