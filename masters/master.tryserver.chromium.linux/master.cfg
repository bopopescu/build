# -*- python -*-
# ex: set syntax=python:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

import os
import socket

from buildbot.scheduler import Triggerable

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_config
from master import master_config_tryserver
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import annotator_factory
from master.factory import chromium_factory
from master.try_job_http import TryJobHTTP
from master.try_job_rietveld import TryJobRietveld
from master.try_job_svn import TryJobSubversion

import config
import master_site_config

ActiveMaster = master_site_config.TryServerChromiumLinux


MAIL_NOTIFIER = ActiveMaster.is_production_host
UPDATE_CODEREVIEW = ActiveMaster.is_production_host
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host

CreateBuilder = master_config_tryserver.CreateBuilder
m_annotator = master_config_tryserver.m_annotator
m_chromium_linux = master_config_tryserver.m_chromium_linux
m_chromium_chromiumos = master_config_tryserver.m_chromium_chromiumos

# GS archive vars
android_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-android', 'android_try_dbg')
android_rel_archive = master_config.GetGSUtilUrl(
    'chromium-android', 'android_try_rel')
android_fyi_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-android', 'android_try_fyi_dbg')

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda *_: False

####### BUILDERS

# Try queues.
pools = BuildersPools('chrome')

# The default targets to build.
common_targets = [
  'chromium_builder_tests',
]

# Linux builder
linux_targets = common_targets[:]
linux_tests = [
  'app_list_unittests_br',
  'aura_br',
  'base_unittests_br',
  'browser_tests_br',
  'cacheinvalidation_br',
  'cast_br',
  'buildrunner_tests',
  'cc_unittests_br',
  'chromedriver_tests_br',
  'chromedriver_unittests_br',
  'components_unittests_br',
  'compositor_br',
  'content_browsertests_br',
  'check_deps_br',
  'check_licenses_br',
  'crypto_br',
  'dbus_br',
  'device_unittests_br',
  'events_br',
  'gcm_unit_tests_br',
  'google_apis_unittests_br',
  'gpu_br',
  'interactive_ui_tests_br',
  'jingle_br',
  'media_br',
  'nacl_integration_br',
  'nacl_loader_unittests_br',
  'net_br',
  'ppapi_unittests_br',
  'printing_br',
  'remoting_br',
  'sandbox_linux_unittests_br',
  'sync_integration_br',
  'telemetry_perf_unittests_br',
  'telemetry_unittests_br',
  'unit_br',
  'url_unittests_br',
  'views_br',
]

# TODO(maruel): Having a different name to specify the tests to run is a tad
# insane. Should be fixed separately.
linux_tests_full_name = [
  'app_list_unittests',
  'aura_unittests',
  'accessibility_unittests',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cast_unittests',
  'cc_unittests',
  'check_deps',
  'check_licenses',
  'chromedriver_tests',
  'chromedriver_unittests',
  'components_unittests',
  'compositor_unittests',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'dbus_unittests',
  'device_unittests',
  'display_unittests',
  'events_unittests',
  'gcm_unit_tests',
  'gfx_unittests',
  'google_apis_unittests',
  'gpu_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'nacl_integration',
  'nacl_loader_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sandbox_linux_unittests',
  'sql_unittests',
  'sync_integration_tests',
  'sync_unit_tests',
  'ui_base_unittests',
  'unit_tests',
  'url_unittests',
  'views_unittests',
] + chromium_factory.blink_tests_for_chromium_tryjobs


b_linux_rel_precise32 = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=linux_targets,
    tests=linux_tests + ['sizes_br'],
    builder_name='linux_rel_precise32',
    slavebuilddir='linux_precise32',
    factory_properties={
      'use_xvfb_on_linux': True,
    })

# Tests that are single-machine shard-safe on Linux ChromeOS
linux_chromeos_sharded = [
  'accessibility_unittests',
  'base_unittests',
  'browser_tests',
  'buildrunner_tests',
  'components_unittests',
  'content_browsertests',
  'content_unittests',
  'media_unittests',
  'nacl_loader_unittests',
]

linux_chromeos_tests = [
  ('accessibility_unittests_br', 'accessibility_unittests'),
  ('app_list_unittests_br', 'app_list_unittests'),
  ('ash_unittests_br', 'aura_builder'),
  ('aura_br', 'aura_builder'),
  ('base_unittests_br', 'base_unittests'),
  ('browser_tests_br', 'browser_tests'),
  ('buildrunner_tests', None),
  ('cacheinvalidation_br', 'cacheinvalidation_unittests'),
  ('cast_br', 'cast_unittests'),
  ('check_deps_br', None),
  ('chromeos_unittests_br', 'chromeos_unittests'),
  ('components_unittests_br', 'components_unittests'),
  ('compositor_br', 'compositor_unittests'),
  ('content_browsertests_br', 'content_browsertests'),
  ('content_unittests_br', 'content_unittests'),
  ('crypto_br', 'crypto_unittests'),
  ('dbus_br', 'dbus_unittests'),
  ('device_unittests_br', 'device_unittests'),
  ('display_unittests_br', 'display_unittests'),
  ('events_br', 'aura_builder'),
  ('gcm_unit_tests_br', 'gcm_unit_tests'),
  ('gfx_unittests_br', 'gfx_unittests'),
  ('google_apis_unittests_br', 'google_apis_unittests'),
  ('gpu_br', 'gpu_unittests'),
  (None, 'url_unittests'),
  ('interactive_ui_tests_br', 'interactive_ui_tests'),
  ('ipc_tests_br', 'ipc_tests'),
  ('jingle_br', 'jingle_unittests'),
  ('keyboard_unittests_br', 'aura_builder'),
  ('media_br', 'media_unittests'),
  ('message_center_unittests_br', 'message_center_unittests'),
  ('nacl_loader_unittests_br', 'nacl_loader_unittests'),
  ('net_br', 'net_unittests'),
  ('ppapi_unittests_br', 'ppapi_unittests'),
  ('printing_br', 'printing_unittests'),
  (None, 'remoting_unittests'),
  ('sandbox_linux_unittests_br', 'sandbox_linux_unittests'),
  ('ui_base_unittests_br', 'ui_base_unittests'),
  ('unit_sql_br', 'sql_unittests'),
  ('unit_sync_br', 'sync_unit_tests'),
  ('unit_unit_br', 'unit_tests'),
  ('views_br', 'views_unittests'),
]

def without_tests(pairs, without):
  return [(a, b) for (a, b) in pairs if a not in without]

def extract_tests(pairs):
  return list(set(a for (a, _) in pairs if a is not None))

def extract_options(pairs):
  return list(set(b for (_, b) in pairs if b is not None))

browser_tests = [
  ('browser_tests_br', 'browser_tests'),
  ('content_browsertests_br', 'content_browsertests'),
  ('interactive_ui_tests_br', 'interactive_ui_tests'),
]

b_android_aosp = {
  'name': 'android_aosp',
  'factory': m_annotator.BaseFactory('android_webview_aosp', timeout=2400),
}

b_android_arm64_dbg_recipe = {
  'name': 'android_arm64_dbg_recipe',
  'factory': m_annotator.BaseFactory('android/builder'),
}

# combined builder/tester android recipes
b_android_dbg_tests_recipe = {
    'name': 'android_dbg_tests_recipe',
    'factory': m_annotator.BaseFactory('android/tester'),
}

b_android_compile_rel = {
  'name': 'android_compile_rel',
  'factory': m_annotator.BaseFactory('android/builder'),
}

b_android_rel_tests_recipe = {
    'name': 'android_rel_tests_recipe',
    'factory': m_annotator.BaseFactory('android/tester'),
}

b_android_fyi_dbg_tests_recipe = {
    'name': 'android_fyi_dbg_tests_recipe',
    'factory': m_annotator.BaseFactory('android/tester'),
}

b_android_x86_dbg_recipe = {
    'name': 'android_x86_dbg_recipe',
    'factory': m_annotator.BaseFactory('android/builder'),
}

b_android_clang_dbg_recipe = {
    'name': 'android_clang_dbg_recipe',
    'factory': m_annotator.BaseFactory('android/builder')
}

# This builder is intended to be used to build and archive full builds (same as
# "Linux Builder" on chromium.linux) for a requested revision. These archived
# builds will then be downloaded and used to bisect test failures (similar to
# "linux_perf_bisect_builder" on tryserver.chromium.perf.
b_bisect_builder = {
  'name': 'bisect_builder',
  'factory': m_annotator.BaseFactory('chromium'),
}

b_infra_tester = {
    'name': 'infra_tester',
    'factory': m_annotator.BaseFactory('infra/infra_repo_trybot'),
}

chromium_builders = []

for targ in ('_rel', '_dbg'):
  chromium_builders.extend([{
    'name': 'linux_chromium_compile%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot', timeout=3600),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux'
  }, {
    'name': 'linux_chromium%s_ng' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot', timeout=3600),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux'
  }])

for targ in ('_rel', '_dbg'):
  chromium_builders.extend([{
    'name': 'linux_chromium_chromeos_ozone%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux_chromeos'
  }, {
    'name': 'linux_chromium_chromeos%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux_chromeos'
  }, {
    'name': 'linux_chromium_chromeos_compile%s_ng' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux_chromeos'
  }, {
    'name': 'linux_chromium_trusty%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux',
  }, {
    'name': 'linux_chromium_trusty32%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux',
  }, {
    'name': 'linux_chromium_gn%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_gn'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux_chromium_gn'
  }, {
    'name': 'linux_chromium_gn_chromeos%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_gn'),
    'slavebuilddir': 'linux_chromium_gn_chromeos'
  }, {
    'name': 'android_chromium_gn_compile%s' % targ,
    'factory': m_annotator.BaseFactory('chromium_gn'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'android_chromium_gn'
  }])

chromium_builders.extend([{
    'name': 'linux_chromium_chromeos_athena_rel_ng',
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    'slavebuilddir': 'linux_chromeos_athena'
}])

chromium_builders.append({
    'name': 'linux_chromium_chromeos_rel_ng',
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    # Share build directory with compatible existing builders to save space.
    'slavebuilddir': 'linux_chromeos'
})

chromium_builders.append({
    'name': 'linux_chromium_chromeos_asan_rel_ng',
    'factory': m_annotator.BaseFactory('chromium_trybot'),
})

chromium_builders.append({
    'name': 'android_chromium_gn_compile_rel_recipe',
    'factory': m_annotator.BaseFactory('android/builder'),
})

chromium_builders.append({
    'name': 'android_chromium_gn_compile_dbg_recipe',
    'factory': m_annotator.BaseFactory('android/builder'),
})

chromium_builders.extend([{
    'name': 'linux_arm_compile',
    'factory': m_annotator.BaseFactory('chromium_trybot'),
    'slavebuilddir': 'linux_arm',
  }, {
    'name': 'linux_arm',
    'factory': m_annotator.BaseFactory('chromium_trybot',
                                       triggers=['linux_arm']),
    'slavebuilddir': 'linux_arm',
  }, {
    'name': 'linux_arm_tester',
    'factory': m_annotator.BaseFactory('chromium_isolate'),
    'slavebuilddir': 'linux_arm_tester',
  },
])

chromium_builders.append({
  'name': 'linux_chromium_compile_dbg_32',
  'factory': m_annotator.BaseFactory('chromium_trybot'),
  # Share build directory with compatible existing builders to save space.
  'slavebuilddir': 'linux'
})

chromium_builders.append({
  'name': 'linux_chromium_compile_dbg_32_ng',
  'factory': m_annotator.BaseFactory('chromium_trybot'),
  # Share build directory with compatible existing builders to save space.
  'slavebuilddir': 'linux'
})

# Ozone builder
ozone_builders = [{
    'name': 'linux_ecs_ozone',
    'builddir': 'ozone-linux',
    'factory': m_annotator.BaseFactory('ozone_ecs',
        {'use_mirror': ActiveMaster.is_production_host or None}),
}]

b_linux_chromium_asan_rel = {
  'name': 'linux_chromium_asan_rel',
  'factory': m_annotator.BaseFactory('chromium_trybot'),
}

b_linux_chromium_asan_rel_ng = {
  'name': 'linux_chromium_asan_rel_ng',
  'factory': m_annotator.BaseFactory('chromium_trybot'),
}

# browser_tests run for two hours. Please don't add them to the bot.
b_linux_clang_tsan = {
  'name': 'linux_clang_tsan',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      options=[
        '--build-tool=ninja',
        '--compiler=goma-clang',
        'accessibility_unittests',
        'base_unittests',
        'cacheinvalidation_unittests',
        'cast_unittests',
        'components_unittests',
        'content_browsertests',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'url_unittests',
        'gcm_unit_tests',
        'google_apis_unittests',
        'gpu_unittests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'ppapi_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sandbox_linux_unittests',
        'sql_unittests',
        'sync_unit_tests',
        'unit_tests',
      ],
      tests=[
        'accessibility_unittests',
        'base_unittests',
        'cacheinvalidation_unittests',
        'cast',
        'components_unittests',
        'content_browsertests',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'gcm_unit_tests',
        'google_apis_unittests',
        'gpu',
        'ipc_tests',
        'jingle',
        'media',
        'net',
        'ppapi_unittests',
        'printing',
        'remoting',
        'sandbox_linux_unittests',
        'unit_sql',
        'unit_sync',
        'unit_tests',
        'url_unittests',
      ],
      factory_properties={
        'tsan': True,  # Used by runtest.py.
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': ('tsan=1 '
                          'use_allocator=none fastbuild=0 '
                          'disable_nacl=1'),  # http://crbug.com/257320
        },
        'sharded_tests': master_config_tryserver.sharded_tests,
      }),
}

b_linux_chromeos_asan = {
  'name': 'linux_chromeos_asan',
  'factory': m_chromium_chromiumos.ChromiumOSASANFactory(
      slave_type='Trybot',
      options=['--build-tool=ninja', '--compiler=goma-clang'] +
        extract_options(without_tests(
            linux_chromeos_tests,
            extract_tests(browser_tests) + ['dbus_br'])),
      tests=extract_tests(without_tests(
          linux_chromeos_tests,
          extract_tests(browser_tests) + ['dbus_br'])),
      factory_properties={
        'asan': True,  # Used by runtest.py.
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': 'asan=1 lsan=1 use_allocator=none fastbuild=0 '
                         'chromeos=1 component=static_library '
        },
        'lsan': True,
        'sharded_tests': master_config_tryserver.sharded_tests,
      }),
}

b_linux_chromeos_browser_asan = {
  'name': 'linux_chromeos_browser_asan',
  'factory': m_chromium_chromiumos.ChromiumOSASANFactory(
      slave_type='Trybot',
      options=['--build-tool=ninja', '--compiler=goma-clang'] +
        extract_options(browser_tests),
      tests=extract_tests(browser_tests),
      factory_properties={
        'asan': True,  # Used by runtest.py.
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': 'asan=1 use_allocator=none fastbuild=0 '
                         'chromeos=1 component=static_library '
        },
        'lsan': True,
        'sharded_tests': master_config_tryserver.sharded_tests,
      }),
}

# NaCl SDK try bots
b_linux_nacl_sdk = CreateBuilder(
    platform='linux',
    target='Release',
    options=['chromium_builder_tests'],
    tests=['annotated_steps'],
    factory_properties={
        'annotated_script': master_config_tryserver.nacl_sdk_script},
    builder_name='linux_nacl_sdk',
    goma=True)
b_linux_nacl_sdk_bionic = CreateBuilder(
    platform='linux',
    target='Release',
    options=['chromium_builder_tests'],
    tests=['annotated_steps'],
    factory_properties={
        'annotated_script': master_config_tryserver.nacl_sdk_script},
    builder_name='linux_nacl_sdk_bionic',
    goma=True)

# NaCl SDK build-only try bots
b_linux_nacl_sdk_build = CreateBuilder(
    platform='linux',
    target='Release',
    options=[],
    tests=[],
    builder_name='linux_nacl_sdk_build',
    annotation_script=master_config_tryserver.nacl_sdk_script_build,
    goma=True)
b_linux_nacl_sdk_bionic_build = CreateBuilder(
    platform='linux',
    target='Release',
    options=[],
    tests=[],
    builder_name='linux_nacl_sdk_bionic_build',
    annotation_script=master_config_tryserver.nacl_sdk_script_build,
    goma=True)

# Presubmit bots
def presubmit(name, slavebuilddir=None):
  return {
    'name': '%s_presubmit' % name,
    'slavebuilddir': (slavebuilddir or ('presubmit_%s' % name)),
    'factory': m_annotator.BaseFactory('run_presubmit', {'repo_name': name}),
  }

b_chromium_presubmit = presubmit('chromium', slavebuilddir='linux')
b_tools_build_presubmit = presubmit('tools_build')


c['builders'] = [
  b_linux_rel_precise32,
  b_android_compile_rel,
  b_android_dbg_tests_recipe, b_android_arm64_dbg_recipe,
  b_android_fyi_dbg_tests_recipe,
  b_android_x86_dbg_recipe,
  b_android_clang_dbg_recipe,
  b_android_rel_tests_recipe,
  b_android_aosp,
  b_linux_clang_tsan,
  b_linux_chromium_asan_rel,
  b_linux_chromium_asan_rel_ng,
  b_linux_chromeos_asan,
  b_linux_chromeos_browser_asan,
  b_linux_nacl_sdk, b_linux_nacl_sdk_bionic,
  b_linux_nacl_sdk_build, b_linux_nacl_sdk_bionic_build,
  b_chromium_presubmit,
  b_tools_build_presubmit,
  b_bisect_builder,
  b_infra_tester,
] + chromium_builders + ozone_builders


# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'TryServerChromiumLinux')

for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder.setdefault('auto_reboot', ActiveMaster.is_production_host)


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

last_good_urls = {'chrome': ActiveMaster.last_good_url,
                  'blink': ActiveMaster.last_good_blink_url}
code_review_sites = {'chrome': ActiveMaster.code_review_site,
                     'blink': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
      name='try_job_http',
      port=ActiveMaster.try_job_port,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

if ActiveMaster.is_production_host:
  c['schedulers'].append(TryJobRietveld(
        name='try_job_rietveld',
        last_good_urls=last_good_urls,
        code_review_sites=code_review_sites,
        pools=pools,
        project='chrome',
        filter_master=True))

if LISTEN_TO_SVN:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

# Triggerable scheduler for linux arm
c['schedulers'].append(Triggerable(
    name='linux_arm',
    builderNames=['linux_arm_tester']))

####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
if ActiveMaster.is_production_host:
  c['buildbotURL'] = ActiveMaster.buildbot_url
else:
  c['buildbotURL'] = 'http://%s:%d/' % (
      socket.getfqdn(), ActiveMaster.master_port)

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  from master import chromium_notifier
  c['status'].append(chromium_notifier.ChromiumNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps={'': ['update_scripts']},
      relayhost=config.Master.smtp,
      status_header=
          '%(steps)s failed on slave "%(slavename)s" for builder "%(builder)s"',
      subject='%(steps)s failed on trybot %(slavename)s on %(date)s',
      sendToInterestedUsers=False,
      extraRecipients=['chrome-troopers+tryalert@google.com'],
      use_getname=True,
      enable_mail=ActiveMaster.is_production_host))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      reply_to=ActiveMaster.reply_to,
      subject="try %(result)s for %(reason)s @ r%(revision)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails(),
      # disable success emails from triggered builders
      no_email_on_success=['linux_arm']))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))


# The followings are what is kept on disk.
# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs. 3000 is not even a full day but the server is full. Keep
# more build objects than log since they are much smaller.
c['buildHorizon'] = 6000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
c['logCompressionLimit'] = False

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3


# Hack buildbot so the Stop build button doesn't work anymore. Otherwise it's
# just a pain, user misuse this button all the time.
def hack_stop(function):
  def hook(*args, **kwargs):
    result = function(*args, **kwargs)
    result = result.replace('<input type="submit" value="Stop',
        '<input type="button" onclick="alert(\''
        'For more information, visit '
        'http://dev.chromium.org/developers/try-server-usage'
        '\');"'
        ' value="Stop')
    return result
  return hook

# Only do the hack_stop if we are the production master.  This allows
# us to keep the STOP button live for local/test instances.
#if ActiveMaster.is_production_host:
#  from buildbot.status.web.builder import StatusResourceBuilder
#  StatusResourceBuilder.build_line = hack_stop(StatusResourceBuilder.build_line)
#  from buildbot.status.web import base
#  base.make_stop_form = hack_stop(base.make_stop_form)


####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'

# vi: set ts=4 sts=2 sw=2 et:
