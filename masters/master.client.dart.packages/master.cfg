# -*- python -*-
# ex: set syntax=python:

# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Periodic
from buildbot.schedulers import triggerable
from buildbot.schedulers.filter import ChangeFilter

from common import chromium_utils
from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import gclient_factory, annotator_factory
from master.factory.dart import dart_factory
from master.factory.dart import pub_poller
from master.factory.dart.dart_factory import linux_env, windows_env
from master.factory.dart.dart_factory import linux_clang_env
from master.factory.dart.channels import CHANNELS
from twisted.python import log

from packages import DART_REPO_SAMPLES, GITHUB_PACKAGES, PACKAGES

import config
import master_site_config

ActiveMaster = master_site_config.DartPackages
utils = dart_factory.DartUtils(ActiveMaster)

MASTER_HOST = ActiveMaster.master_host
WEB_STATUS = True
MAIL_NOTIFIER = ActiveMaster.is_production_host
GOOD_REVISIONS = False

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

slaves = slaves_list.SlavesList('slaves.cfg', 'DartPackages')

def GetGithubProject(package):
  # We default to the dart-lang github project
  return package.get('github_project') or 'dart-lang'

def GetPackageBuilderName(package, system):
  repo = '-repo' if package.get('is_repo') else ''
  sample = '-sample' if package.get('is_sample') else ''
  return 'packages-%s-%s%s%s' % (system, package['name'], repo, sample)

variants = [ ]

# The default set of systems that we create for all packages
systems = ['windows', 'linux']


def GetVariant(package, system, repo):
  return {
    'name': GetPackageBuilderName(package, system),
    'category': package['name'],
    'platform': 'packages',
    'os': system,
    'deps': [('dart/third_party/pkg/%s' % package['name'],
              repo),
             ('dart/third_party/package-bots',
              utils.get_github_repo('dart-lang', 'package-bots'))],
    }

for package in GITHUB_PACKAGES:
  for system in systems:
    repo = utils.get_github_repo(GetGithubProject(package), package['name'])
    variants.append(GetVariant(package, system, repo))

for sample in DART_REPO_SAMPLES:
  for system in systems:
    variants.append(GetVariant(sample, system, None))

####### Factory setup

utils.setup_factories(variants)

####### Schedulers
c['schedulers'] = []

builder_names = utils.get_builder_names(variants)

for package in PACKAGES:
  # We always trigger on the trigger bot package - used when updating the sdk
  projects = ['package-bots']
  projects.extend(package.get('package_dependencies', []))
  if not package.get('is_repo'):
    projects.append(package['name'])
  projects.append('pub_packages')
  filter = ChangeFilter(project = projects)
  builders = []
  for system in systems:
    builders.append(GetPackageBuilderName(package, system))
  for builder in builders:
    assert builder in builder_names

  c['schedulers'].append(Scheduler(
      name=package['name'],
      change_filter=filter,
      treeStableTimer=0,
      builderNames=builders
  ))


####### Builders
c['builders'] = []
for b in utils.get_builders_from_variants(variants, slaves, []):
  c['builders'].append(b)

####### CHANGESOURCES

# General trigger used to trigger all bots when we have a new sdk.
c['change_source'] = [utils.get_github_poller('dart-lang', 'package-bots')]

# TODO(rico+siggi) what more do we need?
non_moved_packages = ["analysis_server", "analysis_services",
                      "analysis_testing", "analyzer", "args", "async",
                      "barback", "browser", "code_transformers", "collection",
                      "compiler_unsupported", "crypto", "csslib",
                      "custom_element", "docgen", "fixnum", "http_base",
                      "http", "http_multi_server", "http_parser",
                      "http_server", "intl", "json_rpc_2", "logging",
                      "matcher", "math", "mime", "mock", "mutation_observer",
                      "oauth2", "observe", "path", "polymer_expressions",
                      "polymer", "pool", "scheduled_test", "serialization",
                      "shelf", "shelf_web_socket", "smoke", "source_maps",
                      "source_span", "stack_trace", "string_scanner",
                      "template_binding", "typed_data", "typed_mock",
                      "unittest", "utf", "watcher", "web_components", "yaml"]
pub_only_packages = ['googleapis', 'googleapis_beta']

moved_packages = [s['name'].replace('-', '_') for s in GITHUB_PACKAGES]
pub_packages = non_moved_packages + pub_only_packages + moved_packages

poller = pub_poller.PubPoller(pub_packages,
                              project='pub_packages')
c['change_source'].append(poller)

for package in GITHUB_PACKAGES:
  project = GetGithubProject(package)
  c['change_source'].append(utils.get_github_poller(project, package['name']))

####### BUILDSLAVES

c['slaves'] = utils.get_slaves(c['builders'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

# Prioritize the builders depending on channel.
c['prioritizeBuilders'] = utils.prioritize_builders

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  for status in utils.get_web_statuses(order_console_by_time=True):
    c['status'].append(status)

if MAIL_NOTIFIER:
  # We have people that are interested in a specific subset of the builders
  # and want to be notified whenever they break.
  mail_notifiers = [
    {
      'extraRecipients': ['kustermann@google.com', 'sgjesse@google.com'],
      'builders': ['packages-linux-googleapis_auth', 'packages-linux-gcloud'],
      'subject' : 'BB | Package Waterfall > GCloud builder failed.',
    },
  ]

  for notifier in utils.get_mail_notifier_statuses(mail_notifiers):
    c['status'].append(notifier)

# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200

# Template generation is using 40 entries, so give it a little extra.
c['buildCacheSize'] = 42

c['properties'] = {'mastername': master_utils.GetMastername()}

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = ActiveMaster.buildbot_url
