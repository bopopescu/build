# -*- python -*-
# ex: set syntax=python:

# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.changes import filter
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.status.mail import MailNotifier
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source import Repo
from master import slaves_list
from master import master_utils
from master.repo_poller import RepoPoller

import master_site_config
import config

c = BuildmasterConfig = {}


ActiveMaster = master_site_config.ART


# Factory definitions. TODO(ngeoffray): Move this code to recipes.
checkout = Repo(
    manifest_url = 'https://android.googlesource.com/platform/manifest',
    manifest_branch = 'master-art')


def setup_host_x86(factory, x86_64=False):
  env = { 'TARGET_PRODUCT': 'sdk',
          'TARGET_BUILD_VARIANT': 'eng',
          'TARGET_BUILD_TYPE': 'release',
          'ART_TEST_RUN_TEST_RELOCATE': 'false',
          'ART_TEST_RUN_TEST_NO_RELOCATE': 'false',
          'ART_TEST_RUN_TEST_PREBUILD': 'false',
          'ART_TEST_RUN_TEST_NO_PREBUILD': 'true',
          'ART_TEST_INTERPRETER': 'true',
          'ART_TEST_OPTIMIZING': 'true',
          'ART_TEST_FULL': 'false',
          'ART_TEST_KEEP_GOING': 'true' }

  if not x86_64:
    env.update({ 'HOST_PREFER_32_BIT' : 'true' })

  build = ShellCommand(
      name = "build sdk-eng",
      command = ["make", "-j8", "build-art-host"], 
      haltOnFailure = True, 
      description = "build sdk-eng",
      env = env)

  test1 = ShellCommand(
      name = "test cc",
      command = ["make", "-j8", "test-art-host-gtest"],
      haltOnFailure = False, 
      description = "test gtest",
      timeout = 2400,
      env = env)

  test2 = ShellCommand(
      name = "test quick",
      command = ["make", "-j8", "test-art-host-run-test-default", "dist"], 
      haltOnFailure = False, 
      description = "test quick",
      env = env)

  test3 = ShellCommand(
      name = "test optimizing",
      command = ["make", "-j8", "test-art-host-run-test-optimizing", "dist"],
      haltOnFailure = False, 
      description = "test optimizing",
      env = env)

  test4 = ShellCommand(
      name = "test interpreter",
      # Use a lower -j number for interpreter, some tests take a long time
      # to run on it.
      command = ["make", "-j5", "test-art-host-run-test-interpreter", "dist"],
      haltOnFailure = False, 
      description = "test interpreter",
      timeout = 2400,
      env = env)

  factory.addStep(checkout)
  factory.addStep(build)
  factory.addStep(test1)
  factory.addStep(test2)
  factory.addStep(test3)
  factory.addStep(test4)


def setup_hammerhead(factory):
  out_dir = '${PWD}/hammerhead/%s/out/' % factory.workdir
  env = {'TARGET_PRODUCT': 'arm_krait',
         'TARGET_BUILD_VARIANT': 'eng',
         'TARGET_BUILD_TYPE': 'release',
         'ANDROID_SERIAL': '03a79ae90ae5889b',
         'PATH': '%s/host/linux-x86/bin:${PATH}' % out_dir,
         'ANDROID_PRODUCT_OUT': '%starget/product/arm_krait' % out_dir,
         'ART_TEST_RUN_TEST_RELOCATE': 'false',
         'ART_TEST_RUN_TEST_NO_RELOCATE': 'false',
         'ART_TEST_RUN_TEST_PREBUILD': 'false',
         'ART_TEST_RUN_TEST_NO_PREBUILD': 'true',
         'ART_TEST_INTERPRETER': 'true',
         'ART_TEST_OPTIMIZING': 'true',
         'ART_TEST_FULL': 'false',
         'ART_TEST_KEEP_GOING': 'true'}

  build = ShellCommand(
      name = "build arm_krait",
      command = ["make", "-j8", "build-art-target",  "adb"],
      haltOnFailure = True, 
      description = "build arm_krait",
      env = env)

  test1 = ShellCommand(
      name = "test gtest",
      command = ["make", "-j4", "test-art-target-gtest"], 
      haltOnFailure = False, 
      description = "test gtest",
      timeout = 2400,
      env = env)

  test2 = ShellCommand(
      name = "test quick",
      command = ["make", "-j4", "test-art-target-run-test-default", "dist"],
      haltOnFailure = False, 
      description = "test quick",
      env = env)

  test3 = ShellCommand(
      name = "test optimizing",
      command = ["make", "-j4", "test-art-target-run-test-optimizing", "dist"],
      haltOnFailure = False, 
      description = "test optimizing",
      env = env)

  test4 = ShellCommand(
      name = "test interpreter",
      command = ["make", "-j4", "test-art-target-run-test-interpreter", "dist"],
      haltOnFailure = False, 
      description = "test interpreter",
      timeout = 2400,
      env = env)

  factory.addStep(checkout)
  factory.addStep(build)
  factory.addStep(test1)
  factory.addStep(test2)
  factory.addStep(test3)
  factory.addStep(test4)


art_host_x86_build = BuildFactory()
setup_host_x86(art_host_x86_build, x86_64=False)


art_host_x86_64_build = BuildFactory()
setup_host_x86(art_host_x86_64_build, x86_64=True)


art_hammerhead_build = BuildFactory()
setup_hammerhead(art_hammerhead_build)


# Builders setup.
c['builders']= [ {'name' : "host-x86",
                  'category': 'aosp/host',
                  'factory' : art_host_x86_build,
                  'auto_reboot': False },

                 {'name' : "host-x86_64",
                  'category': 'aosp/host',
                  'factory' : art_host_x86_64_build,
                  'auto_reboot': False },

                 {'name' : "hammerhead",
                  'category': 'aosp/target',
                  'factory' : art_hammerhead_build,
                  'auto_reboot': False },
               ]


repopoller = RepoPoller(
    repo_url = 'https://android.googlesource.com/platform',
    manifest = 'manifest',
    repo_branches = ['master-art'],
    pollInterval = 300,
    revlinktmpl = "https://android.googlesource.com/platform/%s/+/%s")
c['change_source'] = repopoller


# Scheduler setup
trunkchanged = SingleBranchScheduler(
    name = "trunkchanged",
    change_filter = filter.ChangeFilter(branch = None),
    treeStableTimer = 0,
    builderNames = ["host-x86", "host-x86_64", "hammerhead"])
c['schedulers'] = [ trunkchanged ]


# Slave setup
slaves = slaves_list.SlavesList('slaves.cfg', 'ART')
for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


c['slaves'] = master_utils.AutoSetupSlaves(
    c['builders'],
    config.Master.GetBotPassword())


# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['./templates', '../master.chromium/templates'],
    order_console_by_time=True)


if ActiveMaster.is_production_host:
  c['status'].append(MailNotifier(
      fromaddr=ActiveMaster.from_address,
      sendToInterestedUsers=False,
      relayhost=config.Master.smtp,
      mode="problem",
      extraRecipients=["ngeoffray@google.com"]))
